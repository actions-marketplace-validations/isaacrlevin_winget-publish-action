name: 'Winget Publish'
description: 'Publish Package to Winget using Winget Create'
inputs:
  token:
    description: 'GitHub PAT'
    required: true
    default: ''
  publish-type:
    description: 'Create or Update'
    required: true
    default: 'Create'
  user:
    description: 'User Submitting Package'
    required: true
    default: 'user'
  package:
    description: 'Name of Package being submitted'
    required: true
    default: 'package'
  version:
    description: 'Semantic Version of Package'
    required: true
    default: '0.0.0'
  url:
    description: 'Url of Installer'
    required: true
    default: ''
  arch:
    description: 'Architecture of Installer (x86, x64, arm, arm64)'
    required: false
    default: ''
  installer-type:
    description: 'Installer Type (The Windows Package Manager supports MSIX, MSI, and executable installers. Some well known formats (Inno, Nullsoft, WiX, and Burn) provide standard sets of installer switches to provide different installer experiences.)'
    required: false
    default: ''
  publisher:
    description: 'Name of the publisher for a given package'
    required: false
    default: ''
  package-name:
    description: 'The full package name to be displayed as the publisher or ISV wishes'
    required: false
    default: ''
  license:
    description: 'The license governing the use and or distribution for the product'
    required: false
    default: ''
  short-description:
    description: 'The description for a package. This will apprear with winget show commands'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - run: |
        echo Publish Type Specified not Create or Update
        exit 1
      if: ${{ (inputs.publish-type != 'Create') && (inputs.publish-type != 'Update') }}
      shell: bash

    - name: Use WingetCreate Update to update existing manigest
      if: ${{ inputs.publish-type == 'Update' }}
      run: |
        Invoke-WebRequest -Uri https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
        .\wingetcreate.exe update ${{ inputs.user }}.${{ inputs.package }} -u ${{ inputs.url }} -v ${{ inputs.version }} -t ${{ inputs.token }} -s
      shell: pwsh

    - name: Populate Winget manifest files and use WingetCreate Submit to submit manifest
      run: |
        New-Item -Path $PWD -Name ${{ inputs.version }} -ItemType "directory"
        # Get all files inside the folder and adjust the version/hash
        Invoke-WebRequest -Uri ${{ inputs.url }} -OutFile "./file"
        $fileHash = Get-Filehash "./file"
        $Hash = $fileHash.Hash
        Get-ChildItem ${{ github.action_path }}\templates\*.yaml | ForEach-Object -Process {
            $content = Get-Content $FileName -Raw
            $content = $content.Replace('<VERSION>', "${{ inputs.version }}")
            $content = $content.Replace('<PACKAGE>', "${{ inputs.package }}")
            $content = $content.Replace('<HASH>', $Hash)
            $content = $content.Replace('<ARCH>', "${{ inputs.arch }}")
            $content = $content.Replace('<INSTALLER-TYPE>', "${{ inputs.installer-type }}")
            $content = $content.Replace('<URL>', "${{ inputs.url }}")
            $content = $content.Replace('<PUBLISHER>', "${{ inputs.publisher }}")
            $content = $content.Replace('<PACKAGE-NAME>', "${{ inputs.package-name }}")
            $content = $content.Replace('<LICENSE>', "${{ inputs.license }}")
            $content = $content.Replace('<DESCRIPTION>', "${{ inputs.short-description }}")
            $content | Out-File -Encoding 'UTF8' "./${{ inputs.version }}/$FileName"
        }
        if (-not $Token) {
            return
        }
        # Get the latest wingetcreate exe
        Invoke-WebRequest 'https://aka.ms/wingetcreate/latest/self-contained' -OutFile wingetcreate.exe
        # Create the PR
        ./wingetcreate.exe submit --token ${{ inputs.token }} ${{ inputs.version }}

      if: ${{ inputs.publish-type == 'Create' }}
      shell: pwsh
